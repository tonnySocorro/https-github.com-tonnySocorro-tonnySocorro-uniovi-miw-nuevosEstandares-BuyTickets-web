{"ast":null,"code":"var _jsxFileName = \"/Users/tonny/my-app/src/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [newAdminAddress, setNewAdminAddress] = useState('');\n  const [transactionResult, setTransactionResult] = useState(null);\n  const [contractBalances, setContractBalances] = useState({\n    realBalance: 0,\n    variableBalance: 0\n  });\n  const [userBalance, setUserBalance] = useState(ethers.BigNumber.from(0));\n  const [donationAmount, setDonationAmount] = useState(\"0.02\");\n  const checkUserBalance = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const userAddress = await signer.getAddress();\n      const balance = await provider.getBalance(userAddress);\n      setUserBalance(ethers.BigNumber.from(balance));\n    } catch (error) {\n      console.error(\"Error fetching user balance\", error);\n    }\n  };\n  const getContractBalances = async () => {\n    try {\n      const balances = await myContract.current.getContractBalance();\n      setContractBalances({\n        realBalance: balances[0],\n        variableBalance: balances[1]\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleAdminChange = async e => {\n    e.preventDefault();\n    try {\n      const tx = await myContract.current.changeAdmin(newAdminAddress, {\n        gasLimit: 6721975,\n        gasPrice: 20000000000\n      });\n      await tx.wait();\n      setTransactionResult({\n        success: true,\n        message: \"Admin changed successfully.\"\n      });\n    } catch (error) {\n      console.error(error);\n      setTransactionResult({\n        success: false,\n        message: \"Error changing admin. See console for details.\"\n      });\n    }\n  };\n  const myContract = useRef(null);\n  const [tikets, setTikets] = useState([]);\n  useEffect(() => {\n    initContracts();\n    const fetchUserBalance = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const userAddress = await signer.getAddress();\n        const balance = await provider.getBalance(userAddress);\n        setUserBalance(ethers.BigNumber.from(balance));\n      } catch (error) {\n        console.error(\"Error fetching user balance\", error);\n      }\n    };\n    fetchUserBalance();\n  }, []);\n  let initContracts = async () => {\n    var _myContract$current;\n    await configureBlockchain();\n    let tiketsFromBlockchain = await ((_myContract$current = myContract.current) === null || _myContract$current === void 0 ? void 0 : _myContract$current.getTikets());\n    if (tiketsFromBlockchain != null) setTikets(tiketsFromBlockchain);\n  };\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await provider.request({\n          method: 'net_version'\n        });\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        myContract.current = new Contract(myContractManifest.networks[networkId].address, myContractManifest.abi, signer);\n      }\n    } catch (error) {}\n  };\n  const clickBuyTiket = async i => {\n    const amountInWei = ethers.utils.parseEther(donationAmount);\n\n    // Verificar que el usuario tiene suficiente saldo antes de realizar la compra\n    if (userBalance.lt(amountInWei)) {\n      alert(\"Saldo insuficiente para comprar el ticket\");\n      return;\n    }\n    const tx = await myContract.current.buyTiket(i, {\n      value: amountInWei,\n      gasLimit: 6721975,\n      gasPrice: 20000000000\n    });\n    await tx.wait();\n    const tiketsUpdated = await myContract.current.getTikets();\n    setTikets(tiketsUpdated);\n    // Actualizar el balance del usuario después de la compra si es necesario\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const userAddress = await signer.getAddress();\n    const balance = await provider.getBalance(userAddress);\n    setUserBalance(ethers.BigNumber.from(balance)); // Actualizar el balance del usuario después de la compra\n  };\n  //let clickBuyTiket = async (i) => {\n  // const tx = await myContract.current.buyTiket(i,  {\n  //   value: ethers.utils.parseEther(\"0.02\"),\n  // gasLimit: 6721975,\n  //gasPrice: 20000000000,\n  // });\n  // await tx.wait();\n\n  //const tiketsUpdated = await myContract.current.getTikets();\n  // setTikets(tiketsUpdated);\n  //}\n\n  let withdrawBalance = async () => {\n    const tx = await myContract.current.transferbalanceToAdmin();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tikets store\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => withdrawBalance(),\n      children: \"Withdraw Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tikets.map((address, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Tiket \", i, \" comprado por \", address, address == ethers.constants.AddressZero && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          onClick: () => clickBuyTiket(i),\n          children: \" buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-inline\",\n      onSubmit: handleAdminChange,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newAdminAddress,\n        onChange: e => setNewAdminAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Change Admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-inline\",\n      onSubmit: e => clickBuyTiket(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"any\",\n        value: donationAmount,\n        onChange: e => setDonationAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Buy Tiket with Donation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), transactionResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert ${transactionResult.success ? \"alert-success\" : \"alert-danger\"}`,\n      children: transactionResult.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getContractBalances,\n      children: \"Get Contract Balances\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Real Balance: \", ethers.utils.formatEther(contractBalances.realBalance)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Variable Balance: \", ethers.utils.formatEther(contractBalances.variableBalance)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkUserBalance,\n      children: \"Check User Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"User Balance: \", ethers.utils.formatEther(userBalance), \" BNB\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"F35acDZwjUEGGlM21Nkn2iDA7q8=\");\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 201,\n  columnNumber: 5\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","detectEthereumProvider","Contract","ethers","myContractManifest","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","newAdminAddress","setNewAdminAddress","transactionResult","setTransactionResult","contractBalances","setContractBalances","realBalance","variableBalance","userBalance","setUserBalance","BigNumber","from","donationAmount","setDonationAmount","checkUserBalance","provider","providers","Web3Provider","window","ethereum","signer","getSigner","userAddress","getAddress","balance","getBalance","error","console","getContractBalances","balances","myContract","current","getContractBalance","handleAdminChange","e","preventDefault","tx","changeAdmin","gasLimit","gasPrice","wait","success","message","tikets","setTikets","initContracts","fetchUserBalance","_myContract$current","configureBlockchain","tiketsFromBlockchain","getTikets","request","method","networkId","networks","address","abi","clickBuyTiket","i","amountInWei","utils","parseEther","lt","alert","buyTiket","value","tiketsUpdated","withdrawBalance","transferbalanceToAdmin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","constants","AddressZero","href","className","onSubmit","type","onChange","target","step","formatEther","_c","root","createRoot","document","getElementById","render","StrictMode","$RefreshReg$"],"sources":["/Users/tonny/my-app/src/index.js"],"sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Contract, ethers } from \"ethers\";\nimport myContractManifest from \"./contracts/MyContract.json\";\nimport { useState, useEffect, useRef } from 'react';\n\nfunction App(){\n  const [newAdminAddress, setNewAdminAddress] = useState('');\n  const [transactionResult, setTransactionResult] = useState(null);\n  const [contractBalances, setContractBalances] = useState({ realBalance: 0, variableBalance: 0 });\n  const [userBalance, setUserBalance] = useState(ethers.BigNumber.from(0));\n  const [donationAmount, setDonationAmount] = useState(\"0.02\");\n  const checkUserBalance = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const userAddress = await signer.getAddress();\n    const balance = await provider.getBalance(userAddress);\n    setUserBalance(ethers.BigNumber.from(balance));\n    } catch (error) {\n      console.error(\"Error fetching user balance\", error);\n    }\n  };\n \n  const getContractBalances = async () => {\n    try {\n      const balances = await myContract.current.getContractBalance();\n      setContractBalances({ realBalance: balances[0], variableBalance: balances[1] });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleAdminChange = async (e) => {\n    e.preventDefault();\n    try {\n      const tx = await myContract.current.changeAdmin(newAdminAddress, {\n        gasLimit: 6721975,\n        gasPrice: 20000000000,\n      });\n      await tx.wait();\n      setTransactionResult({ success: true, message: \"Admin changed successfully.\" });\n    } catch (error) {\n      console.error(error);\n      setTransactionResult({ success: false, message: \"Error changing admin. See console for details.\" });\n    }\n  };\n  const myContract = useRef(null);\n  const [tikets, setTikets] = useState([]);\n  useEffect( () => {\n    initContracts();\n    const fetchUserBalance = async () => {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const userAddress = await signer.getAddress();\n        const balance = await provider.getBalance(userAddress);\n        setUserBalance(ethers.BigNumber.from(balance));\n      } catch (error) {\n        console.error(\"Error fetching user balance\", error);\n      }\n    };\n  \n    fetchUserBalance();\n  }, [])\n\n  let initContracts = async () => {\n    await configureBlockchain();\n    let tiketsFromBlockchain  = await myContract.current?.getTikets();\n    if (tiketsFromBlockchain != null)\n      setTikets(tiketsFromBlockchain)\n}\n\n\n  let configureBlockchain = async () => {\n    try {\n      let provider = await detectEthereumProvider();\n      if (provider) {\n        await provider.request({ method: 'eth_requestAccounts' });\n        const networkId = await provider.request({ method: 'net_version' })\n\n        provider = new ethers.providers.Web3Provider(provider);\n        const signer = provider.getSigner();\n        \n          myContract.current  = new Contract(\n          myContractManifest.networks[networkId].address,\n          myContractManifest.abi,\n          signer\n        );\n\n\n      }\n    } catch (error) { }\n  }\n  \n  const clickBuyTiket = async (i) => {\n   \n    const amountInWei = ethers.utils.parseEther(donationAmount);\n\n    // Verificar que el usuario tiene suficiente saldo antes de realizar la compra\n    if (userBalance.lt(amountInWei)) {\n      alert(\"Saldo insuficiente para comprar el ticket\");\n      return;\n    }\n\n    const tx = await myContract.current.buyTiket(i, {\n      value: amountInWei,\n      gasLimit: 6721975,\n      gasPrice: 20000000000,\n    });\n    await tx.wait();\n\n    const tiketsUpdated = await myContract.current.getTikets();\n    setTikets(tiketsUpdated);\n     // Actualizar el balance del usuario después de la compra si es necesario\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const userAddress = await signer.getAddress();\n  const balance = await provider.getBalance(userAddress);\n  setUserBalance(ethers.BigNumber.from(balance));// Actualizar el balance del usuario después de la compra\n  };\n//let clickBuyTiket = async (i) => {\n // const tx = await myContract.current.buyTiket(i,  {\n   //   value: ethers.utils.parseEther(\"0.02\"),\n     // gasLimit: 6721975,\n      //gasPrice: 20000000000,\n // });\n // await tx.wait();\n\n  //const tiketsUpdated = await myContract.current.getTikets();\n // setTikets(tiketsUpdated);\n//}\n\nlet withdrawBalance = async () => {\n  const tx = await myContract.current.transferbalanceToAdmin(); \n}\n\n\n\n\n \n  return (\n    <div>\n        <h1>Tikets store</h1>\n        <button onClick={() => withdrawBalance()}>Withdraw Balance</button>\n        <ul>\n            { tikets.map( (address, i) =>\n                <li>Tiket { i } comprado por { address }\n                    { address == ethers.constants.AddressZero && \n                        <a href=\"#\" onClick={()=>clickBuyTiket(i)}> buy</a> }\n                </li>\n            )}\n        </ul>\n        \n        <form className=\"form-inline\" onSubmit={handleAdminChange}>\n        <input\n          type=\"text\"\n          value={newAdminAddress}\n          onChange={(e) => setNewAdminAddress(e.target.value)}\n        />\n        <button type=\"submit\">Change Admin</button>\n      </form>\n      <form className=\"form-inline\" onSubmit={(e) => clickBuyTiket(e)}>\n        <input\n          type=\"number\"\n          step=\"any\"\n          value={donationAmount}\n          onChange={(e) => setDonationAmount(e.target.value)}\n        />\n        <button type=\"submit\">Buy Tiket with Donation</button>\n      </form>\n      \n      {transactionResult && (\n        <div className={`alert ${transactionResult.success ? \"alert-success\" : \"alert-danger\"}`}>\n          {transactionResult.message}\n        </div>\n)}\n <button onClick={getContractBalances}>Get Contract Balances</button>\n      <div>\n      <p>Real Balance: {ethers.utils.formatEther(contractBalances.realBalance)}</p>\n  <p>Variable Balance: {ethers.utils.formatEther(contractBalances.variableBalance)}</p>\n</div>\n<button onClick={checkUserBalance}>Check User Balance</button>\n      <div>\n        <p>User Balance: {ethers.utils.formatEther(userBalance)} BNB</p>\n      </div>\n    </div>\n    \n\n)\n}\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}